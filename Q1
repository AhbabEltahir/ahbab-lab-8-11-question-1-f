#include <stdio.h>
#include <stdbool.h>

#define SIZE 24
#define nCols 8
#define nRows 3

// PROTOTYPES
bool isValid(int length, int pos);
void remove_element(int arr[], int length, int pos);
void print_array(int array[], int length);
void print_matrix(int mat[][nCols], int rows);

int main(){
    int arr[SIZE] = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240};
   
    int arr2d[nRows][nCols];

    // Print the initial array
    printf("Initial Array:\n");
    print_array(arr, SIZE);

    // Remove an element at position 2
    printf("\nArray after removing element at position 2:\n");
    remove_element(arr, SIZE, 2);
    print_array(arr, SIZE - 1); // SIZE - 1 because one element is removed

    // Optional: Print the matrix, if needed
    // print_matrix(arr2d, nRows);  // Uncomment this if you want to use arr2d
}

// Function to remove an element from the array
void remove_element(int arr[], int length, int pos) {
    if (!isValid(length, pos)) {
        printf("Invalid position to remove: %d\n", pos);
        return;
    }
    for (int i = pos; i < length - 1; i++) {
        arr[i] = arr[i + 1];
    }
    arr[length - 1] = 0; // Optional, sets the last element to 0 for visual consistency
}

// Function to check if the position is valid
bool isValid(int length, int pos) {
    return pos >= 0 && pos < length;
}

// Function to print the array
void print_array(int array[], int length) {
    for (int i = 0; i < length; i++) {
        printf("array[%d] = %d\n", i, array[i]);
    }
}

// Function to print the 2D matrix
void print_matrix(int mat[][nCols], int rows) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < nCols; j++) {
            printf("mat[%d][%d] = %d\n", i, j, mat[i][j]);
        }
        puts("");  // Add a blank line between rows for readability
    }
}

